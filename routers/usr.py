from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from markups.usr import *
from ai import AIGenerate, AIVision, AIConversation
from aiogram.fsm.context import FSMContext
from data.user import UserX 
from routers.States.usr.State import *
import os
import asyncio

router = Router()

@router.callback_query(F.data == 'registration')
async def registration(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:')
    await state.set_state(User.age)

@router.message(User.age)
async def get_age(message: Message, state: FSMContext):
    age = message.text
    await state.update_data(age=age)
    async with UserX() as db:
        await db.edit_user(tg_id=message.from_user.id, age=int(age))
    await message.delete()
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –≥–µ–Ω–¥–µ—Ä:', reply_markup=gender_kb())
    await state.set_state(User.gender)

@router.callback_query(User.gender)
async def get_male(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'male': male = '–ú—É–∂—Å–∫–æ–π'
    else: male = '–ñ–µ–Ω—Å–∫–∏–π'
    await callback.message.delete()
    await state.update_data(gender=male)
    async with UserX() as db:
        await db.edit_user(tg_id=callback.message.from_user.id, gender=male)
    await callback.message.delete()
    await callback.message.answer('–•–æ—Ä–æ—à–æ, —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ—ë –∏–º—è:')
    await callback.answer()
    await state.set_state(User.name)

@router.message(User.name)
async def get_name(message: Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    async with UserX() as db:
        await db.edit_user(tg_id=message.from_user.id, name=name, isRegistered=True)
    await message.answer_sticker('CAACAgIAAxkBAAEM0QZm6AJoFCsK7GNTzj54X98X7zqDvQACSgIAAladvQrJasZoYBh68DYE')
    await message.delete()
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è! –¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É!\n(–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º!)', reply_markup=get_start_kb())
    await message.bot.send_message(6910460878, f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username}')
    await state.clear()

@router.message(F.text == 'üåé –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    async with UserX() as db:
        user = await db.get_user(message.from_user.id)
    is_premium = '–ê–∫—Ç–∏–≤–Ω–∞' if user[2] else '–ù–µ –∞–∫—Ç–∏–≤–Ω–∞'
    
    id_user = user[0]
    balance = user[4]
    date = user[1]
    name = user[7]
    age = user[5]
    gender = user[6]
    await message.answer(f'üôã‚Äç‚ôÇÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüÜî ID: {id_user},\nüôã‚Äç‚ôÇÔ∏è –ò–º—è: {name}\n‚òòÔ∏è –í–æ–∑—Ä–∞—Å—Ç: {age}\nüë´ –ì–µ–Ω–¥–µ—Ä:{gender}\nüíµ –ë–∞–ª–∞–Ω—Å: {balance}$\n‚ú® PRO –ø–æ–¥–ø–∏—Å–∫–∞: {is_premium} \nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date}', reply_markup=profile_kb())

@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=get_start_kb())

@router.message(F.text == '‚ú® –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç')
async def get_answer(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è:', reply_markup=action_solve())

@router.callback_query(F.data == 'text')
async def text_format(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:', reply_markup=otmena_kb())
    await callback.answer()
    await state.set_state(Text.get)

@router.message(Text.get)
async def generate_answer(message: Message, state: FSMContext):
    await message.reply('üë®üèª‚Äçüè´ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')
    task = message.text
    try:
        answer = AIGenerate(f'–ü–æ–º–æ–≥–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —à–∫–æ–ª–µ:\n{task}.  –° –ø–æ–ª–Ω—ã–º —Ö–æ—Ä–æ—à–∏–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –æ–±—å—è—Å–Ω–µ–Ω–∏–µ–º')
        await message.answer(f'–í–∞—à –æ—Ç–≤–µ—Ç: \n\n\n{answer}', reply_markup=like_kb(), parse_mode='Markdown')
        await state.clear()
    except Exception as e:
        await state.clear()
        await message.answer(f'–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å :(\n\n({e})', reply_markup=like_kb())
        await message.delete()

@router.callback_query(F.data == 'photo')
async def get_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:', reply_markup=otmena_kb())
    await callback.answer()
    await state.set_state(Photo.get)

@router.message(Photo.get)
async def handle_photo(message: Message, bot: Bot, state: FSMContext):
    await message.reply('üë®üèª‚Äçüè´ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')
    try:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        await bot.download(file=file_info, destination='photo.jpg')

        answer = AIVision(file='photo.jpg')
        await message.answer(f'–í–∞—à –æ—Ç–≤–µ—Ç: \n\n\n{answer}', reply_markup=like_kb())
        await state.clear()

        os.remove('photo.jpg')
    except Exception as e:
        await state.clear()
        await message.delete()
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')

@router.callback_query(F.data == 'dislike')
async def like_dislike(callback: CallbackQuery):
    await callback.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –í—ã –ø–æ–º–æ–≥–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ò–ò! ‚ù§Ô∏è', show_alert=True)

@router.callback_query(F.data == 'like')
async def like_dislike(callback: CallbackQuery):
    await callback.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –í—ã –ø–æ–º–æ–≥–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ò–ò! ‚ù§Ô∏è', show_alert=True)

@router.callback_query(F.data == 'another_one')
async def another_one(callback: CallbackQuery, state: FSMContext):
    await text_format(callback=callback, state=state)

@router.message(F.text == 'üåü –ö—É–ø–∏—Ç—å PRO')
async def buy_pro(message: Message):
    await message.answer('üåü –ö—É–ø–∏—Ç—å PRO', reply_markup=get_back_kb())
    await message.answer('–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ PRO –ø–æ–¥–ø–∏—Å–∫–∞?\n-–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö, –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç, –∞ —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ WorxAI –Ω–∞ 100%(–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–¥–∞, –ü–æ–º–æ—â—å —Å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏, –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –û—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤ –∞—É–¥–∏–æ, –∞ —Ç–∞–∫–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)\n(–î–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ PRO)', reply_markup=payment_kb())

@router.message(F.text == 'ü§ñ –¢–µ—Å—Ç WorxAI')
async def testworxai(message: Message):
    async with UserX() as db:
        user = await db.get_user(message.from_user.id)
    is_premium = user[2]
    if is_premium:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é:', reply_markup=action_with_ai())
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é:', reply_markup=action_with_ai())

@router.message(F.text == 'üë®üèº‚Äçüè´ –ü–æ–º–æ—â—å')
async def help(message: Message):
    await message.answer('''
**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ SmartDuck!**

–í–∞—à –±–æ—Ç –∏–º–µ–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –≤ —Ä–∞–±–æ—Ç–µ. –í–æ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ç–æ–º—É, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏:
–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"**, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –í–∞–º –±—É–¥–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç, –≥–µ–Ω–¥–µ—Ä –∏ –∏–º—è.
–ü—Ä–æ—Ñ–∏–ª—å:

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **"üåé –ü—Ä–æ—Ñ–∏–ª—å"**, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –í—ã —É–≤–∏–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, –≥–µ–Ω–¥–µ—Ä, –±–∞–ª–∞–Ω—Å, —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ PRO –∏ –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.
–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç:

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **"‚ú® –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"**, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∑–∞–¥–∞—á–µ–π.
–ö—É–ø–∏—Ç—å PRO:

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **"üåü –ö—É–ø–∏—Ç—å PRO"**, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ PRO –∏ –µ—ë –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞—Ö. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ —Å–¥–µ–ª–∞—Ç—å –ø–æ–∫—É–ø–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.
–¢–µ—Å—Ç WorxAI:

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **"ü§ñ –¢–µ—Å—Ç WorxAI"**, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞—à–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞ PRO, –≤—ã —Å–º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é.
–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å:

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **"üëç –ù—Ä–∞–≤–∏—Ç—Å—è"** –∏–ª–∏ **"üëé –ù–µ –Ω—Ä–∞–≤–∏—Ç—Å—è"**, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –∏ –ø–æ–º–æ—á—å –Ω–∞–º —É–ª—É—á—à–∏—Ç—å –±–æ—Ç.
–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏–π:

–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É **"‚ùå –û—Ç–º–µ–Ω–∞"**, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∑–∞–¥–∞—á—É.
–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
–ü–æ–¥–¥–µ—Ä–∂–∫–∞ PRO: **–ü–æ–¥–ø–∏—Å–∫–∞ PRO** –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º, —Ç–∞–∫–∏–º –∫–∞–∫ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø, —É—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö –∏ –¥–æ—Å—Ç—É–ø –∫ –∑–∞–∫—Ä—ã—Ç–æ–º—É —á–∞—Ç—É. –£–∑–Ω–∞–π—Ç–µ –±–æ–ª—å—à–µ –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–∞ –∫–Ω–æ–ø–∫–µ "üåü –ö—É–ø–∏—Ç—å PRO".

–ü–æ–º–æ—â—å —Å –∑–∞–¥–∞—á–∞–º–∏: –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏–ª–∏ –∑–∞–¥–∞—á–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏. –ü—Ä–æ—Å—Ç–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ "‚ú® –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç".

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞–º. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å!
                         ''', parse_mode='Markdown', reply_markup=get_back_kb())

@router.callback_query(F.data == 'cancel')
async def cancel_solve(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await callback.answer()

@router.callback_query(F.data == 'get_dialogue')
async def get_dialogue(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–î–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π –Ω–∞—á–∞–ª—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–æ–Ω—á–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"', reply_markup=otmena_kb())
    await state.set_state(Dialogue.get)
    await callback.answer()

@router.message(F.text == 'üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
async def stop_dialogue(message: Message, state: FSMContext):
    await message.answer('–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    await message.delete()
    await state.clear()
    
@router.message(Dialogue.get)
async def dialogue(message: Message, state: FSMContext):
    prompt = message.text
    await message.reply(AIConversation(prompt))

@router.callback_query(F.data == 'top_up')
async def top_up(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–ú–∏–Ω. —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è: 1$):', reply_markup=otmena_kb())
    await callback.answer()
    await state.set_state(Top_Up.amount)
    
@router.message(Top_Up.amount)
async def top_up_amount(message: Message, state: FSMContext):
    amount = message.text
    if amount.isdigit() and int(amount) >= 1:
        await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –ø–ª–∞—Ç–µ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É: ', reply_markup=payments_kb())
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É')
