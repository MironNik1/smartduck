from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from markups.usr import *
from ai import AIGenerate, AIVision
from aiogram.fsm.context import FSMContext
from data.user import UserX
from routers.States.usr.State import Text, Photo, BuyPRO
from PIL import Image
from configs.botcfg import TOKEN as API_TOKEN

import os

router = Router()

@router.message(F.text == 'üåé –ü—Ä–æ—Ñ–∏–ª—å')
async def profile(message: Message):
    user = UserX().get_user(message.from_user.id)
    id_user = user[0]
    balance = user[4]
    date = user[1]
    await message.answer(f'üôã‚Äç‚ôÇÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\nüÜî ID: {id_user}\nüíµ –ë–∞–ª–∞–Ω—Å: {balance}$\nüìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {date}')

@router.message(F.text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥')
async def back(message: Message):
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=get_start_kb())

@router.message(F.text == '‚ú® –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç')
async def get_answer(message: Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞–Ω–∏—è:', reply_markup=action_solve())

@router.callback_query(F.data == 'text')
async def text_format(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞—á–∏:', reply_markup=otmena_kb())
    await state.set_state(Text.get)

@router.message(Text.get)
async def generate_answer(message: Message, state: FSMContext):
    await message.reply('üë®üèª‚Äçüè´ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')
    task = message.text
    try:
        await message.delete()
        answer = AIGenerate(f'–ü–æ–º–æ–≥–∏ —Å —Ä–µ—à–µ–Ω–∏–µ–º –¥–∞–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏ –ø–æ —à–∫–æ–ª–µ:\n{task}.  –° –ø–æ–ª–Ω—ã–º —Ö–æ—Ä–æ—à–∏–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º –æ–±—å—è—Å–Ω–µ–Ω–∏–µ–º')
        await message.answer(f'–í–∞—à –æ—Ç–≤–µ—Ç: \n\n\n{answer}', reply_markup=like_kb(), parse_mode='Markdown')
        await state.clear()
    except Exception:
        await state.clear()
        await message.delete()
        await message.answer('–ù–µ –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å :(', reply_markup=like_kb())

@router.callback_query(F.data == 'photo')
async def get_photo(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:', reply_markup=otmena_kb())
    await state.set_state(Photo.get)

@router.message(Photo.get)
async def handle_photo(message: Message, bot: Bot, state: FSMContext):
    await message.reply('üë®üèª‚Äçüè´ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...')
    try:
        photo = message.photo[-1]
        file_info = await bot.get_file(photo.file_id)
        await bot.download(file=file_info, destination='photo.jpg')

        answer = AIVision(file='photo.jpg')
        await message.answer(f'–í–∞—à –æ—Ç–≤–µ—Ç: \n\n\n{answer}', reply_markup=like_kb(), parse_mode='Markdown')
        await state.clear()
        await message.delete()
        
        os.remove('photo.jpg')
    except:
        await state.clear()
        await message.delete()
        await message.answer('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑—è—Ç–∏–∏ —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!')


@router.callback_query(F.data == 'dislike')
async def like_dislike(callback: CallbackQuery):
    await callback.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –í—ã –ø–æ–º–æ–≥–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ò–ò! ‚ù§Ô∏è', show_alert=True)
    
@router.callback_query(F.data == 'like')
async def like_dislike(callback: CallbackQuery):
    await callback.answer(text='–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å. –í—ã –ø–æ–º–æ–≥–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ò–ò! ‚ù§Ô∏è', show_alert=True)

@router.message(F.text == 'üåü –ö—É–ø–∏—Ç—å PRO')
async def buy_pro(message: Message):
    await message.answer('üåü –ö—É–ø–∏—Ç—å PRO', reply_markup=get_back_kb())
    await message.answer('–î–ª—è —á–µ–≥–æ –Ω—É–∂–Ω–∞ PRO –ø–æ–¥–ø–∏—Å–∫–∞?\n-–ë–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É, —É—á–∞—Å—Ç–∏–µ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–∞—Ö, –¥–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç, –∞ —Ç–∞–∫–∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ –≤ –±–µ—Ç–∞-—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –Ω–∞—à–µ–π –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ WorxAI –Ω–∞ 100%(–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏ –∫–æ–¥–∞, –ü–æ–º–æ—â—å —Å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ –¥–µ–ª–∞–º–∏, –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Å–∏–≤—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –û—Ç–≤–µ—Ç –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –≤ –∞—É–¥–∏–æ, –∞ —Ç–∞–∫–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)\n(–î–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 15% –Ω–∞ PRO)', reply_markup=payment_kb())

@router.message(F.text == 'ü§ñ –¢–µ—Å—Ç WorxAI')
async def testworxai(message: Message):
    await message.answer('–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ PRO!', reply_markup=get_back_kb())

@router.callback_query(F.data == 'cancel')
async def cancel_solve(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await state.clear()
    await callback.message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
